//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Dev\ExCalc\ExCalc\ExCalc\CalcGrammer\Calci.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalciLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, VARB=3, NEWLINE=4, NUMBB=5, ASSIGN_OP=6, ADD_SUB_OP=7, 
		MUL_DIV_OP=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LOWERCASE", "UPPERCASE", "NUM", "VARB", "NEWLINE", "NUMBB", 
		"ASSIGN_OP", "ADD_SUB_OP", "MUL_DIV_OP"
	};


	public CalciLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalciLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "VARB", "NEWLINE", "NUMBB", "ASSIGN_OP", "ADD_SUB_OP", 
		"MUL_DIV_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calci.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalciLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'O', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x6', '\a', '&', 
		'\n', '\a', '\r', '\a', '\xE', '\a', '\'', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '.', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x31', '\v', '\a', '\x3', '\b', '\x5', '\b', '\x34', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x6', '\b', '\x38', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '\x39', '\x3', '\t', '\x6', '\t', '=', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '>', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'J', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x2', 
		'\x2', '\r', '\x3', '\x3', '\x5', '\x4', '\a', '\x2', '\t', '\x2', '\v', 
		'\x2', '\r', '\x5', '\xF', '\x6', '\x11', '\a', '\x13', '\b', '\x15', 
		'\t', '\x17', '\n', '\x3', '\x2', '\b', '\x3', '\x2', '\x63', '|', '\x3', 
		'\x2', '\x43', '\\', '\x3', '\x2', '\x32', ';', '\x3', '\x2', '\x61', 
		'\x61', '\x4', '\x2', '-', '-', '/', '/', '\x4', '\x2', ',', ',', '\x31', 
		'\x31', '\x2', 'Y', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x1D', '\x3', '\x2', '\x2', '\x2', '\t', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\v', '!', '\x3', '\x2', '\x2', '\x2', '\r', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '<', '\x3', '\x2', '\x2', '\x2', '\x13', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'K', '\x3', '\x2', '\x2', '\x2', '\x17', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '*', '\x2', '\x2', '\x1A', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '+', '\x2', '\x2', '\x1C', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\t', '\x2', '\x2', 
		'\x2', '\x1E', '\b', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\t', '\x3', 
		'\x2', '\x2', ' ', '\n', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\t', 
		'\x4', '\x2', '\x2', '\"', '\f', '\x3', '\x2', '\x2', '\x2', '#', '&', 
		'\x5', '\a', '\x4', '\x2', '$', '&', '\x5', '\t', '\x5', '\x2', '%', '#', 
		'\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '&', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '/', '\x3', '\x2', '\x2', 
		'\x2', ')', '.', '\x5', '\a', '\x4', '\x2', '*', '.', '\x5', '\t', '\x5', 
		'\x2', '+', '.', '\x5', '\v', '\x6', '\x2', ',', '.', '\t', '\x5', '\x2', 
		'\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x34', '\a', '\xF', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x38', '\a', '\f', '\x2', '\x2', '\x36', 
		'\x38', '\a', '\xF', '\x2', '\x2', '\x37', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', '\x10', '\x3', '\x2', '\x2', '\x2', 
		';', '=', '\x5', '\v', '\x6', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '@', 'J', '\a', '?', '\x2', '\x2', '\x41', '\x42', '\a', '-', '\x2', 
		'\x2', '\x42', 'J', '\a', '?', '\x2', '\x2', '\x43', '\x44', '\a', '/', 
		'\x2', '\x2', '\x44', 'J', '\a', '?', '\x2', '\x2', '\x45', '\x46', '\a', 
		',', '\x2', '\x2', '\x46', 'J', '\a', '?', '\x2', '\x2', 'G', 'H', '\a', 
		'\x31', '\x2', '\x2', 'H', 'J', '\a', '?', '\x2', '\x2', 'I', '@', '\x3', 
		'\x2', '\x2', '\x2', 'I', '\x41', '\x3', '\x2', '\x2', '\x2', 'I', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\x45', '\x3', '\x2', '\x2', '\x2', 'I', 
		'G', '\x3', '\x2', '\x2', '\x2', 'J', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\t', '\x6', '\x2', '\x2', 'L', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\t', '\a', '\x2', '\x2', 'N', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x2', '%', '\'', '-', '/', '\x33', '\x37', '\x39', 
		'>', 'I', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
