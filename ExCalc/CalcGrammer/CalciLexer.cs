//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Dev\ExCalc\ExCalc\ExCalc\CalcGrammer\Calci.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalciLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, VARB=5, NEWLINE=6, NUMBB=7, ASSIGN_OP=8, 
		ADD_SUB_OP=9, MUL_DIV_OP=10, WHITESPACE=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "LOWERCASE", "UPPERCASE", "NUM", "VARB", 
		"NEWLINE", "NUMBB", "ASSIGN_OP", "ADD_SUB_OP", "MUL_DIV_OP", "WHITESPACE"
	};


	public CalciLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalciLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'++'", "'--'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "VARB", "NEWLINE", "NUMBB", "ASSIGN_OP", 
		"ADD_SUB_OP", "MUL_DIV_OP", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calci.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalciLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', '\x62', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x6', '\t', '\x32', '\n', '\t', '\r', '\t', '\xE', '\t', '\x33', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', ':', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '=', '\v', '\t', '\x3', '\n', '\x5', '\n', '@', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', '\x44', '\n', '\n', 
		'\r', '\n', '\xE', '\n', '\x45', '\x3', '\v', '\x6', '\v', 'I', '\n', 
		'\v', '\r', '\v', '\xE', '\v', 'J', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', 'V', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x6', '\xF', ']', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '^', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\x2', '\r', '\x2', 
		'\xF', '\x2', '\x11', '\a', '\x13', '\b', '\x15', '\t', '\x17', '\n', 
		'\x19', '\v', '\x1B', '\f', '\x1D', '\r', '\x3', '\x2', '\t', '\x3', '\x2', 
		'\x63', '|', '\x3', '\x2', '\x43', '\\', '\x3', '\x2', '\x32', ';', '\x3', 
		'\x2', '\x61', '\x61', '\x4', '\x2', '-', '-', '/', '/', '\x4', '\x2', 
		',', ',', '\x31', '\x31', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 
		'm', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\"', '\x3', '\x2', '\x2', '\x2', '\a', '%', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', ')', '\x3', 
		'\x2', '\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', '\x2', '\xF', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x43', '\x3', '\x2', '\x2', '\x2', '\x15', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x17', 'U', '\x3', '\x2', '\x2', '\x2', '\x19', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '-', '\x2', '\x2', 
		' ', '!', '\a', '-', '\x2', '\x2', '!', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '/', '\x2', '\x2', '#', '$', '\a', '/', '\x2', '\x2', 
		'$', '\x6', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '*', '\x2', '\x2', 
		'&', '\b', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '+', '\x2', '\x2', 
		'(', '\n', '\x3', '\x2', '\x2', '\x2', ')', '*', '\t', '\x2', '\x2', '\x2', 
		'*', '\f', '\x3', '\x2', '\x2', '\x2', '+', ',', '\t', '\x3', '\x2', '\x2', 
		',', '\xE', '\x3', '\x2', '\x2', '\x2', '-', '.', '\t', '\x4', '\x2', 
		'\x2', '.', '\x10', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x5', '\v', 
		'\x6', '\x2', '\x30', '\x32', '\x5', '\r', '\a', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x35', ':', '\x5', '\v', '\x6', '\x2', '\x36', ':', 
		'\x5', '\r', '\a', '\x2', '\x37', ':', '\x5', '\xF', '\b', '\x2', '\x38', 
		':', '\t', '\x5', '\x2', '\x2', '\x39', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x12', '\x3', '\x2', '\x2', '\x2', '=', 
		';', '\x3', '\x2', '\x2', '\x2', '>', '@', '\a', '\xF', '\x2', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\a', '\f', '\x2', 
		'\x2', '\x42', '\x44', '\a', '\xF', '\x2', '\x2', '\x43', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\x14', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'I', '\x5', '\xF', '\b', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x16', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'V', '\a', '?', '\x2', '\x2', 'M', 'N', 
		'\a', '-', '\x2', '\x2', 'N', 'V', '\a', '?', '\x2', '\x2', 'O', 'P', 
		'\a', '/', '\x2', '\x2', 'P', 'V', '\a', '?', '\x2', '\x2', 'Q', 'R', 
		'\a', ',', '\x2', '\x2', 'R', 'V', '\a', '?', '\x2', '\x2', 'S', 'T', 
		'\a', '\x31', '\x2', '\x2', 'T', 'V', '\a', '?', '\x2', '\x2', 'U', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'M', '\x3', '\x2', '\x2', '\x2', 'U', 
		'O', '\x3', '\x2', '\x2', '\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\t', '\x6', '\x2', '\x2', 'X', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\t', '\a', '\x2', '\x2', 'Z', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\t', '\b', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\b', '\xF', '\x2', '\x2', 
		'\x61', '\x1E', '\x3', '\x2', '\x2', '\x2', '\r', '\x2', '\x31', '\x33', 
		'\x39', ';', '?', '\x43', '\x45', 'J', 'U', '^', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
