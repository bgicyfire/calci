//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Dev\ExCalc\ExCalc\ExCalc\CalcGrammer\Calci.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalciParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, VARB=3, NEWLINE=4, NUMBB=5, ASSIGN_OP=6, ADD_SUB_OP=7, 
		MUL_DIV_OP=8;
	public const int
		RULE_seq = 0, RULE_line = 1, RULE_varb = 2, RULE_num = 3, RULE_add_sub = 4, 
		RULE_mul_div = 5, RULE_atom = 6;
	public static readonly string[] ruleNames = {
		"seq", "line", "varb", "num", "add_sub", "mul_div", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "VARB", "NEWLINE", "NUMBB", "ASSIGN_OP", "ADD_SUB_OP", 
		"MUL_DIV_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calci.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalciParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalciParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalciParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SeqContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CalciParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public SeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeqContext seq() {
		SeqContext _localctx = new SeqContext(Context, State);
		EnterRule(_localctx, 0, RULE_seq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARB) {
				{
				{
				State = 14; line();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 20; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public VarbContext varb() {
			return GetRuleContext<VarbContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(CalciParser.ASSIGN_OP, 0); }
		public Add_subContext add_sub() {
			return GetRuleContext<Add_subContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(CalciParser.NEWLINE, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; varb();
			State = 23; Match(ASSIGN_OP);
			State = 24; add_sub(0);
			State = 25; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarbContext : ParserRuleContext {
		public ITerminalNode VARB() { return GetToken(CalciParser.VARB, 0); }
		public VarbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varb; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarbContext varb() {
		VarbContext _localctx = new VarbContext(Context, State);
		EnterRule(_localctx, 4, RULE_varb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(VARB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode NUMBB() { return GetToken(CalciParser.NUMBB, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 6, RULE_num);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(NUMBB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_subContext : ParserRuleContext {
		public Mul_divContext mul_div() {
			return GetRuleContext<Mul_divContext>(0);
		}
		public Add_subContext add_sub() {
			return GetRuleContext<Add_subContext>(0);
		}
		public ITerminalNode ADD_SUB_OP() { return GetToken(CalciParser.ADD_SUB_OP, 0); }
		public Add_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_sub; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_subContext add_sub() {
		return add_sub(0);
	}

	private Add_subContext add_sub(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_subContext _localctx = new Add_subContext(Context, _parentState);
		Add_subContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_add_sub, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 32; mul_div(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Add_subContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_add_sub);
					State = 34;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 35; Match(ADD_SUB_OP);
					State = 36; mul_div(0);
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mul_divContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Mul_divContext mul_div() {
			return GetRuleContext<Mul_divContext>(0);
		}
		public ITerminalNode MUL_DIV_OP() { return GetToken(CalciParser.MUL_DIV_OP, 0); }
		public Mul_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul_div; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul_div(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mul_divContext mul_div() {
		return mul_div(0);
	}

	private Mul_divContext mul_div(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mul_divContext _localctx = new Mul_divContext(Context, _parentState);
		Mul_divContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_mul_div, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 43; atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 50;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Mul_divContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_mul_div);
					State = 45;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 46; Match(MUL_DIV_OP);
					State = 47; atom();
					}
					} 
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode NUMBB() { return GetToken(CalciParser.NUMBB, 0); }
		public ITerminalNode VARB() { return GetToken(CalciParser.VARB, 0); }
		public Add_subContext add_sub() {
			return GetRuleContext<Add_subContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalciVisitor<TResult> typedVisitor = visitor as ICalciVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 12, RULE_atom);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(NUMBB);
				}
				break;
			case VARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(VARB);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(T__0);
				State = 56; add_sub(0);
				State = 57; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return add_sub_sempred((Add_subContext)_localctx, predIndex);
		case 5: return mul_div_sempred((Mul_divContext)_localctx, predIndex);
		}
		return true;
	}
	private bool add_sub_sempred(Add_subContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool mul_div_sempred(Mul_divContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '@', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x15', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '(', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '+', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x33', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x36', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'>', '\n', '\b', '\x3', '\b', '\x2', '\x4', '\n', '\f', '\t', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x2', '\x2', '\x2', '=', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\b', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\n', '!', '\x3', '\x2', '\x2', '\x2', '\f', ',', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '=', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', 
		'\x5', '\x4', '\x3', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\a', '\x2', '\x2', '\x3', '\x17', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x5', '\x6', '\x4', '\x2', '\x19', '\x1A', 
		'\a', '\b', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\n', '\x6', '\x2', '\x1B', 
		'\x1C', '\a', '\x6', '\x2', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '\x5', '\x2', '\x2', '\x1E', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\a', '\x2', '\x2', ' ', '\t', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\b', '\x6', '\x1', '\x2', '\"', 
		'#', '\x5', '\f', '\a', '\x2', '#', ')', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\f', '\x4', '\x2', '\x2', '%', '&', '\a', '\t', '\x2', '\x2', '&', 
		'(', '\x5', '\f', '\a', '\x2', '\'', '$', '\x3', '\x2', '\x2', '\x2', 
		'(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '\v', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '-', '\b', '\a', 
		'\x1', '\x2', '-', '.', '\x5', '\xE', '\b', '\x2', '.', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\f', '\x4', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\n', '\x2', '\x2', '\x31', '\x33', '\x5', '\xE', '\b', '\x2', '\x32', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\r', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '>', '\a', '\a', '\x2', '\x2', 
		'\x38', '>', '\a', '\x5', '\x2', '\x2', '\x39', ':', '\a', '\x3', '\x2', 
		'\x2', ':', ';', '\x5', '\n', '\x6', '\x2', ';', '<', '\a', '\x4', '\x2', 
		'\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x38', '\x3', '\x2', '\x2', '\x2', '=', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '>', '\xF', '\x3', '\x2', '\x2', '\x2', '\x6', '\x13', 
		')', '\x34', '=',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
